//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.2.
//


package com.ecg.activity;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.dd.CircularProgressButton;
import com.ecg.db.Anno;
import com.ecg_analysis.R.id;
import com.ecg_analysis.R.layout;
import com.github.mikephil.charting.charts.BarChart;
import com.github.mikephil.charting.charts.LineChart;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ShowActivity_
    extends ShowActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.acitvity_show);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ShowActivity_.IntentBuilder_ intent(Context context) {
        return new ShowActivity_.IntentBuilder_(context);
    }

    public static ShowActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ShowActivity_.IntentBuilder_(fragment);
    }

    public static ShowActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ShowActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        ShowActivity_Button_ConnectStart = ((CircularProgressButton) hasViews.findViewById(id.ShowActivity_Button_ConnectStart));
        ShowActivity_TextView_AnalysisText = ((TextView) hasViews.findViewById(id.ShowActivity_TextView_AnalysisText));
        HRChart = ((LineChart) hasViews.findViewById(id.HRChart));
        ShowActivity_RelativeLayout_TimeChart = ((RelativeLayout) hasViews.findViewById(id.ShowActivity_RelativeLayout_TimeChart));
        ShowActivity_Button_ShowTimeChart = ((Button) hasViews.findViewById(id.ShowActivity_Button_ShowTimeChart));
        FreqChart = ((LineChart) hasViews.findViewById(id.FreqChart));
        ShowActivity_RelativeLayout_FreqChart = ((RelativeLayout) hasViews.findViewById(id.ShowActivity_RelativeLayout_FreqChart));
        ShowActivity_LinerLayout_HRChart = ((LinearLayout) hasViews.findViewById(id.ShowActivity_LinerLayout_HRChart));
        ShowActivity_Button_ShowHRChart = ((Button) hasViews.findViewById(id.ShowActivity_Button_ShowHRChart));
        TimeChart = ((BarChart) hasViews.findViewById(id.TimeChart));
        ShowActivity_LinerLayout_ECGChart = ((LinearLayout) hasViews.findViewById(id.ShowActivity_LinerLayout_ECGChart));
        ShowActivity_Button_ShowFreqChart = ((Button) hasViews.findViewById(id.ShowActivity_Button_ShowFreqChart));
        if (ShowActivity_Button_ShowHRChart!= null) {
            ShowActivity_Button_ShowHRChart.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ShowActivity_.this.ShowActivity_Button_ShowHRChart();
                }

            }
            );
        }
        if (ShowActivity_Button_ConnectStart!= null) {
            ShowActivity_Button_ConnectStart.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ShowActivity_.this.ShowActivity_Button_ConnectStart();
                }

            }
            );
        }
        if (ShowActivity_Button_ShowTimeChart!= null) {
            ShowActivity_Button_ShowTimeChart.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ShowActivity_.this.ShowActivity_Button_ShowTimeChart();
                }

            }
            );
        }
        if (ShowActivity_Button_ShowFreqChart!= null) {
            ShowActivity_Button_ShowFreqChart.setOnClickListener(new OnClickListener() {


                @Override
                public void onClick(View view) {
                    ShowActivity_.this.ShowActivity_Button_ShowFreqChart();
                }

            }
            );
        }
        init();
    }

    @Override
    public void ECGChartinvalidate() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.ECGChartinvalidate();
            }

        }
        );
    }

    @Override
    public void TimeChartinvalidate() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.TimeChartinvalidate();
            }

        }
        );
    }

    @Override
    public void BackToMainActivity() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.BackToMainActivity();
            }

        }
        );
    }

    @Override
    public void HRChartinvalidate() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.HRChartinvalidate();
            }

        }
        );
    }

    @Override
    public void FreqChartinvalidate() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.FreqChartinvalidate();
            }

        }
        );
    }

    @Override
    public void updateAnalysisTV(final Anno anno, final int type) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.updateAnalysisTV(anno, type);
            }

        }
        );
    }

    @Override
    public void setCircleButton(final int process) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.setCircleButton(process);
            }

        }
        );
    }

    @Override
    public void BluetoothDisconnetWarning() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ShowActivity_.super.BluetoothDisconnetWarning();
            }

        }
        );
    }

    @Override
    public void ConnectDevice1() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 500, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.ConnectDevice1();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void updateTimeChart() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.updateTimeChart();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void ConnectDevice2() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 1000, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.ConnectDevice2();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void updateRateMap(final double RRinterval) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.updateRateMap(RRinterval);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void ConnectDevice() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.ConnectDevice();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void updateECGChart() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.updateECGChart();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void updateFreqChart() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ShowActivity_.super.updateFreqChart();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_
        extends ActivityIntentBuilder<ShowActivity_.IntentBuilder_>
    {

        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            super(context, ShowActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            super(fragment.getActivity(), ShowActivity_.class);
            fragment_ = fragment;
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            super(fragment.getActivity(), ShowActivity_.class);
            fragmentSupport_ = fragment;
        }

        @Override
        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent, requestCode);
                } else {
                    super.startForResult(requestCode);
                }
            }
        }

    }

}
